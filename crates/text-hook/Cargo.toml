[package]
name = "text-hook"
version = "1.0.0"
edition = "2024"
build = "build.rs"

[lib]
crate-type = ["cdylib"]

[features]

# features ---------------------------------------------------

# 调试输出
debug_output = []
# 调试输出映射文本
debug_text_mapping = ["debug_output"]

# 截获并替换patch数据
patch = []
# 截获ReadFile来实现patch
read_file_patch_impl = ["patch", "file_hook"]
# 默认的patch导出函数实现
default_patch_impl = ["patch"]
# 提取补丁而不是替换补丁
patch_extracting = ["patch"]
# 当该feature开启时，create_font系列函数不再固定字体
enum_font_families = []
# 嵌入`assets/custom.ttf`的自定义字体，会使用`AddFontMemResourceEx`让GDI识别
custom_font = []
# 通过读取`assets/translated.json`生成完整的映射数据，
# 不仅是替身字符，还包括了非映射字符(仅支持jis0208的双字节字符，不支持单字节片假名和CP932的扩展字符)
# ascii码不需要进行映射，所以开启该特性后，几乎不需要使用`MultiByteToWideChar`，
# 通过映射表即可映射几乎所有字符
generate_full_mapping_data = []
# 导出默认的DllMain，内部使用`default_dll_main`，
# 使用`HookImplType::default()`作为钩子实例
export_default_dll_main = []
# 使用`assets/config.json`的`WINDOW_TITLE`字段覆写游戏标题
override_window_title = ["window_hook"]
# 模拟日语环境(目前支持很有限)
emulate_locale = ["locale_hook", "code_cvt_hook"]
# 启用延迟加载，对于某些特性是必要的
delayed_attach = []
# TODO
dll_hijacking = ["delayed_attach"]

# 启用文本相关的钩子
text_hook = []
# 启用文件相关的钩子
file_hook = []
# 启用区域相关的钩子
locale_hook = []
# 启动窗口相关的钩子
window_hook = []
# 启动转码相关的钩子(MultiByteToWideChar & WideChar...)
code_cvt_hook = []

# 是否导出钩子函数，实际上如果用detour的话，不需要导出
export_hooks = []

# 通用impl ---------------------------------------------------

# 调试文件输出的HOOK实现，可用于调试，并导出默认的DllMain
debug_file_impl = ["debug_output", "export_default_dll_main", "file_hook"]
# 默认的HOOK实现(即使用`Hook` trait的默认代码)，并导出默认的DllMain
default_impl = ["export_default_dll_main", "text_hook"]

# 针对特定游戏的impl-------------------------------------------
bleed = ["export_default_dll_main", "text_hook"]
sukisuki = ["default_impl", "generate_full_mapping_data"]
ao_vo = ["patch", "default_impl"]
noise = ["patch", "default_impl"]
lusts = ["default_impl"]
lucky_crosse = ["default_impl", "default_patch_impl"]
cosmos = ["default_impl", "default_patch_impl"]
# 非C社的c4
c4 = [
    "patch",
    "default_impl",
    "enum_font_families",
    "generate_full_mapping_data",
]
bittersweet_fools = [
    "enum_font_families",
    "generate_full_mapping_data",
    "default_impl",
]
white_breath = ["default_impl", "patch", "generate_full_mapping_data"]
mikan = ["default_impl", "read_file_patch_impl", "generate_full_mapping_data"]
# 提取脚本需要`patch_extracting`
uminom = [
    "export_default_dll_main",
    "text_hook",
    "generate_full_mapping_data",
    "override_window_title",
]
bruns = [
    "export_default_dll_main",
    "text_hook",
    "override_window_title",
    "patch",
]
bokudvd = [
    "default_impl",
    "custom_font",
    "generate_full_mapping_data",
    "emulate_locale",
]

[dependencies]
translate-macros.workspace = true
translate-utils.workspace = true
anyhow.workspace = true
once_cell.workspace = true

winapi = { version = "0.3", features = [
    "winuser",
    "wingdi",
    "libloaderapi",
    "memoryapi",
    "debugapi",
    "processthreadsapi",
    "winbase",
    "stringapiset",
    "consoleapi",
    "errhandlingapi",
    "psapi",
] }
sha2 = "0.10"
retour = "0.4.0-alpha.4"
dynasmrt = "4.0.1"
phf = { version = "0.13", features = ["macros"] }
zstd = "0.13"
smallvec = "1"

[build-dependencies]
anyhow.workspace = true

[lints.clippy]
missing_safety_doc = "allow"
too_many_arguments = "allow"
