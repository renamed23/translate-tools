[package]
name = "text-hook"
version = "1.0.0"
edition = "2024"
build = "build.rs"

[lib]
crate-type = ["cdylib"]

[features]

# features ---------------------------------------------------

# 调试输出
debug_output = []
# 调试输出映射文本
debug_text_mapping = ["debug_output"]

# 截获并替换patch数据
patch = []
# 默认的patch导出函数实现
default_patch_impl = ["patch"]
# 提取补丁而不是替换补丁
patch_extracting = ["default_patch_impl"]
# 当该feature开启时，create_font系列函数不再固定字体
enum_font_families = []
# 嵌入`assets/custom.ttf`的自定义字体，会使用`AddFontMemResourceEx`让GDI识别
custom_font = []
# 通过读取`assets/translated.json`生成完整的映射数据，
# 不仅是替身字符，还包括了非映射字符(仅支持jis0208的双字节字符，不支持单字节片假名和CP932的扩展字符)
# ascii码不需要进行映射，所以开启该特性后，几乎不需要使用`MultiByteToWideChar`，
# 通过映射表即可映射几乎所有字符
generate_full_mapping_data = []

# 是否导出钩子函数，实际上如果用detour的话，不需要导出
export_hooks = []
# 内嵌原文->译文字典
embedded_dict = []
# 嵌入`assets/sjis_ext.bin`，使用VNTEXT的映射表解码
shift_bin = []

# 通用impl ---------------------------------------------------

# 调试文件输出的HOOK实现，可用于调试
debug_file_hook_impl = ["debug_output"]
# 默认的HOOK实现，使用`DefaultHook`，并启动`set_debug_panic_hook`
# 会拦截所有与字体相关的GDI函数
default_hook_impl = []

# 针对特定游戏的impl-------------------------------------------
snow_radish = ["patch"]
bleed = []
sukisuki = ["default_hook_impl"]
ao_vo = ["patch", "default_hook_impl"]
noise = ["patch", "default_hook_impl"]
lusts = ["default_hook_impl"]
summer_radish = []
lucky_crosse = ["patch", "shift_bin", "default_hook_impl", "default_patch_impl"]
cosmos = ["patch", "default_patch_impl", "default_hook_impl", "shift_bin"]
# 非C社的c4
c4 = ["patch", "default_hook_impl", "enum_font_families"]

[dependencies]
translate-macros.workspace = true
translate-utils.workspace = true
anyhow.workspace = true
once_cell.workspace = true

winapi = { version = "0.3", features = [
    "winuser",
    "wingdi",
    "libloaderapi",
    "memoryapi",
    "debugapi",
    "processthreadsapi",
    "winbase",
    "stringapiset",
    "consoleapi",
    "errhandlingapi",
] }
sha2 = "0.10"
retour = "0.4.0-alpha.4"
dynasmrt = "4.0.1"
phf = { version = "0.13", features = ["macros"] }
zstd = "0.13"

[build-dependencies]
sha2 = "0.10"
anyhow.workspace = true
translate-utils.workspace = true
serde.workspace = true
serde_json.workspace = true
encoding_rs.workspace = true

[lints.clippy]
missing_safety_doc = "allow"
too_many_arguments = "allow"
